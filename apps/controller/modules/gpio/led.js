//@ts-check

import Max7219 from "max7219-display";
import { order } from "../common.js";
import { currentNotes, notesArrayPointer } from "./distanseSpeaker.js";

/**
 * @typedef {"loading" | "order" | "playlistPreset"} DisplayMode
 */

const displayDriver = new Max7219({
    device: '/dev/spidev0.0',
    controllerCount: 1,
    flip: 'vertical',
    rotate: 0,
});
process.on("exit", () => displayDriver.clearAll())

let ms = 30;

/** @type {DisplayMode} */
let displayMode = "loading";

/** @param {DisplayMode} newMode */
export function setDisplayMode(newMode) {
    displayMode = newMode
}

export async function initLed() {
    await displayDriver.reset(0);

    let frame = 0;
    setInterval(() => {
        switch (displayMode) {
            case "loading": {
                displayDriver.set(0, patterns.loading[frame % patterns.loading.length]);
                break
            }
            case "order": {
                if (order === undefined) return;
                displayDriver.set(0, patterns.order[order - 1]);
                break;
            }
            case "playlistPreset": {
                const n = currentNotes;
                const ptn = [
                    [n[0] === 4, n[0] === 4, n[1] === 4, n[1] === 4, n[2] === 4, n[2] === 4, n[3] === 4, n[3] === 4],
                    [n[0] === 4, n[0] === 4, n[1] === 4, n[1] === 4, n[2] === 4, n[2] === 4, n[3] === 4, n[3] === 4],

                    [n[0] === 3, n[0] === 3, n[1] === 3, n[1] === 3, n[2] === 3, n[2] === 3, n[3] === 3, n[3] === 3],
                    [n[0] === 3, n[0] === 3, n[1] === 3, n[1] === 3, n[2] === 3, n[2] === 3, n[3] === 3, n[3] === 3],

                    [n[0] === 2, n[0] === 2, n[1] === 2, n[1] === 2, n[2] === 2, n[2] === 2, n[3] === 2, n[3] === 2],
                    [n[0] === 2, n[0] === 2, n[1] === 2, n[1] === 2, n[2] === 2, n[2] === 2, n[3] === 2, n[3] === 2],

                    [n[0] === 1, n[0] === 1, n[1] === 1, n[1] === 1, n[2] === 1, n[2] === 1, n[3] === 1, n[3] === 1],
                    [n[0] === 1, n[0] === 1, n[1] === 1, n[1] === 1, n[2] === 1, n[2] === 1, n[3] === 1, n[3] === 1],
                ];

                if (frame % 16 < 8) {
                    ptn[0][notesArrayPointer * 2] = false;
                    ptn[0][notesArrayPointer * 2 + 1] = false;
                    ptn[1][notesArrayPointer * 2] = false;
                    ptn[1][notesArrayPointer * 2 + 1] = false;
                    ptn[2][notesArrayPointer * 2] = false;
                    ptn[2][notesArrayPointer * 2 + 1] = false;
                    ptn[3][notesArrayPointer * 2] = false;
                    ptn[3][notesArrayPointer * 2 + 1] = false;
                    ptn[4][notesArrayPointer * 2] = false;
                    ptn[4][notesArrayPointer * 2 + 1] = false;
                    ptn[5][notesArrayPointer * 2] = false;
                    ptn[5][notesArrayPointer * 2 + 1] = false;
                    ptn[6][notesArrayPointer * 2] = false;
                    ptn[6][notesArrayPointer * 2 + 1] = false;
                    ptn[7][notesArrayPointer * 2] = false;
                    ptn[7][notesArrayPointer * 2 + 1] = false;
                }

                displayDriver.set(0, ptn);
                break;
            }
        }
        frame++;
    }, ms);
}

/**
 * タグ付きテンプレートリテラル用の関数
 * 
 * @param {TemplateStringsArray} strings 
 * @param {unknown[]} variables
 * @returns {(0 | 1)[][]}
 */
function pattern(strings, ...variables) {
    const patternRegex = new RegExp(`^(?:(?:##|\.\.){8}\n){7}(?:##|\.\.){8}$`);

    const [firstString, ...restStrings] = [...strings];
    const pattern = (firstString + restStrings.map((str, i) => variables[i] + str).join(''))
        .trim()
        .replace(/\r/g, '')
        .replace(/^\s+/mg, '');
    const isOk = pattern.match(patternRegex) !== null;
    if (!isOk) throw new Error(`不正なパターン:\n${pattern}`);

    const result = pattern.split('\n')
        .map(rowStr => rowStr.replace(/(.)\1/g, '$1'))
        .map(rowStr => [...rowStr])
        .map(row => row.map(dot => dot === "#" ? 1 : 0))

    return result;
}


const patterns = {
    order: [
        pattern`
        ......####......
        ....######......
        ......####......
        ......####......
        ......####......
        ......####......
        ....########....
        ....########....
        `,
        pattern`
        ....########....
        ..############..
        ..####....####..
        ........######..
        ......######....
        ....######......
        ..############..
        ..############..
        `,
        pattern`
        ....########....
        ..############..
        ....##....####..
        ........######..
        ........######..
        ....##....####..
        ..############..
        ....########....
        `,
        pattern`
        ......########..
        ....##########..
        ..######..####..
        ..####....####..
        ..##############
        ..##############
        ..........####..
        ..........####..
        `,
    ],
    loading: [
        pattern`
        ....########....
        ..############..
        ..........######
        ............####
        ............####
        ............####
        ................
        ................
        `,
        pattern`
        ....########....
        ..############..
        ..........######
        ............####
        ............####
        ............####
        ............##..
        ................
        `,
        pattern`
        ....########....
        ....##########..
        ..........######
        ............####
        ............####
        ............####
        ............##..
        ................
        `,
        pattern`
        ......######....
        ......########..
        ..........######
        ............####
        ............####
        ..........######
        ..........####..
        ................
        `,
        pattern`
        ........####....
        ........######..
        ..........######
        ............####
        ............####
        ..........######
        ........######..
        ........####....
        `,
        pattern`
        ................
        ..........####..
        ..........######
        ............####
        ............####
        ..........######
        ......########..
        ......######....
        `,
        pattern`
        ................
        ............##..
        ..........######
        ............####
        ............####
        ..........######
        ....##########..
        ....########....
        `,
        pattern`
        ................
        ............##..
        ..........######
        ............####
        ............####
        ..........######
        ..############..
        ....########....
        `,
        pattern`
        ................
        ................
        ..........######
        ............####
        ............####
        ..........######
        ..############..
        ....########....
        `,
        pattern`
        ................
        ................
        ................
        ............####
        ............####
        ######....######
        ..############..
        ....########....
        `,
        pattern`
        ................
        ................
        ................
        ................
        ####........####
        ######....######
        ..############..
        ....########....
        `,
        pattern`
        ................
        ................
        ................
        ####............
        ####............
        ######....######
        ..############..
        ....########....
        `,
        pattern`
        ................
        ................
        ######..........
        ####............
        ####............
        ######..........
        ..############..
        ....########....
        `,
        pattern`
        ................
        ..##............
        ######..........
        ####............
        ####............
        ######..........
        ..############..
        ....########....
        `,
        pattern`
        ................
        ..##............
        ######..........
        ####............
        ####............
        ######..........
        ..##########....
        ....########....
        `,
        pattern`
        ....##..........
        ..####..........
        ######..........
        ####............
        ####............
        ######..........
        ..########......
        ....######......
        `,
        pattern`
        ....####........
        ..######........
        ######..........
        ####............
        ####............
        ######..........
        ..######........
        ....####........
        `,
        pattern`
        ....######......
        ..########......
        ######..........
        ####............
        ####............
        ######..........
        ..####..........
        ....##..........
        `,
        pattern`
        ....########....
        ..##########....
        ######..........
        ####............
        ####............
        ######..........
        ..##............
        ................
        `,
        pattern`
        ....########....
        ..############..
        ######..........
        ####............
        ####............
        ######..........
        ..##............
        ................
        `,
        pattern`
        ....########....
        ..############..
        ######..........
        ####............
        ####............
        ######..........
        ................
        ................
        `,
        pattern`
        ....########....
        ..############..
        ######....######
        ####............
        ####............
        ................
        ................
        ................
        `,
        pattern`
        ....########....
        ..############..
        ######....######
        ####........####
        ................
        ................
        ................
        ................
        `,
        pattern`
        ....########....
        ..############..
        ######....######
        ............####
        ............####
        ................
        ................
        ................
        `,
    ]
};